# -*- coding: utf-8 -*-
"""Backtest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/174ldG12HXPxwTqxDPp3GDUK2ew6mc32s
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

path = '/content/drive/MyDrive/India(BSE).xlsx'

data = pd.read_excel(path)

data.head()

data = data.iloc[2:]

data.head()

data.rename(columns=
    {
        'Ticker': 'date',
        '^BSESN': 'close',
        'Unnamed: 2': 'high',
        'Unnamed: 3': 'low',
        'Unnamed: 4': 'open',
    }   , inplace=True)

data.head(10)

data.shape

print(data.isnull().sum())

data.dropna(inplace=True)

print(data.isnull().sum())

print(data.dtypes)

data['date'] = pd.to_datetime(data['date'])
data['close'] = pd.to_numeric(data['close'], errors='coerce')
data['high'] = pd.to_numeric(data['high'], errors='coerce')
data['low'] = pd.to_numeric(data['low'], errors='coerce')
data['open'] = pd.to_numeric(data['open'], errors='coerce')

data.set_index('date', inplace=True)

print(data.dtypes)

print(data.index.dtype)

# closing price over time
plt.figure(figsize=(12, 6))
plt.plot(data.index, data['close'], label='Close Price', color='blue')
plt.title('Closing Price of BSES over Time')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

data['sma100'] = data['close'].rolling(window=100).mean()
data['sma200'] = data['close'].rolling(window=200).mean()

plt.figure(figsize=(12, 6))
plt.plot(data.index, data['close'], label='Close Price', color='blue')
plt.plot(data.index, data['sma100'], label='100-Day SMA', color='red', alpha=0.7)
plt.plot(data.index, data['sma200'], label='200-Day SMA', color='green', alpha=0.7)
plt.title('BSES Close Price with 100-Day and 200-Day Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

data['rolling_std'] = data['close'].rolling(window=100).std()

# Upper Bollinger Band: SMA + (2 * StdDev)
data['upper_band'] = data['sma100'] + (2 * data['rolling_std'])

# Lower Bollinger Band: SMA - (2 * StdDev)
data['lower_band'] = data['sma100'] - (2 * data['rolling_std'])

plt.figure(figsize=(15, 6))

plt.plot(data.index, data['close'], label='Close Price', color='blue')

plt.plot(data.index, data['sma100'], label='100-Day SMA', color='orange')

plt.plot(data.index, data['upper_band'], label='Upper Bollinger Band', color='green', linestyle='--')

plt.plot(data.index, data['lower_band'], label='Lower Bollinger Band', color='red', linestyle='--')

plt.fill_between(data.index, data['lower_band'], data['upper_band'], color='gray', alpha=0.3)

plt.title('Bollinger Bands with SMA100')
plt.legend()
plt.show()

def backtest(data, initial_capital, investment_type):

    if investment_type == 'aggressive':
        investment_fraction = 1.0  # 100% of cash
    elif investment_type == 'moderate':
        investment_fraction = 0.5  # 50% of cash
    elif investment_type == 'passive':
        investment_fraction = 0.25  # 25% of cash
    else:
        print("Invalid type. Choose from 'aggressive', 'moderate', 'passive'.")
        return

    cash = initial_capital  # Cash on hand
    position = 0  # No stock initially(refers to number of stocks with us)
    portfolio_value = []  # Net portfolio value

    def buy_stock(price, amount):
        nonlocal cash, position
        total_cost = price * amount
        if cash >= total_cost:
            position += amount  # Increase position (number of shares owned)
            cash -= total_cost
        return total_cost

    def sell_stock(price, amount):
        nonlocal cash, position
        total_revenue = price * amount
        if position >= amount:  # Ensure enough stock to sell
            position -= amount  # Decrease position (number of shares sold)
            cash += total_revenue
        return total_revenue

    for i in range(100, len(data)):
        current_price = data['close'].iloc[i]
        sma100 = data['sma100'].iloc[i]
        sma200 = data['sma200'].iloc[i]
        lower_band = data['lower_band'].iloc[i]
        upper_band = data['upper_band'].iloc[i]

        # Buy Condition = Price touches or crosses below the lower Bollinger Band AND SMA100 > SMA200
        if current_price <= lower_band and sma100 > sma200:
            # If we are not holding any stock, buy
            if position == 0:
                available_cash = cash * investment_fraction  # Use fraction of available cash based on investment strategy
                amount_to_buy = available_cash // current_price  # Calculate how many stocks we can afford
                buy_stock(current_price, amount_to_buy)

        # Sell Condition: Price touches or crosses above the upper Bollinger Band AND SMA100 < SMA200
        elif current_price >= upper_band and sma100 < sma200:
            # If we hold any stocks, sell
            if position > 0:
                sell_stock(current_price, position)

        # Update portfolio value (Current cash + value of stocks with us right now)
        portfolio_value.append(cash + position * current_price)

    final_value = portfolio_value[-1]
    print(f"Initial Capital: {initial_capital}")
    print(f"Final Portfolio Value: {final_value}")
    print(f"Profit/Loss: {final_value - initial_capital}")

    return portfolio_value

initial_capital = 100000
investment_type = 'aggressive'
portfolio_value = backtest(data, initial_capital, investment_type)

initial_capital2 = 100000
investment_type = 'moderate'
portfolio_value2 = backtest(data, initial_capital2, investment_type)

plt.figure(figsize=(15, 6))
plt.plot(data.index[100:], portfolio_value, label='Portfolio Value', color='b')
plt.plot(data.index[100:], portfolio_value2, label='Portfolio Value', color='r')
plt.title('Portfolio Value Over Time')
plt.xlabel('Date')
plt.ylabel('Portfolio Value ($)')
plt.legend()
plt.show()

